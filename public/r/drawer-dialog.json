{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "drawer-dialog",
  "type": "registry:component",
  "title": "Drawer Dialog",
  "description": "A simple component that works as a dialog component in desktop and as a drawer component in other screens.",
  "registryDependencies": [
    "dialog",
    "drawer"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/drawer-dialog/drawer-dialog.tsx",
      "content": "\"use client\"\n\nimport { useMediaQuery } from \"@/registry/new-york/blocks/drawer-dialog/hooks/use-media-query\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/registry/new-york/ui/dialog\"\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,  \n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@/registry/new-york/ui/drawer\"\nimport { createContext, useContext, useState } from \"react\"\n\nconst DrawerDialogContext = createContext<{ isDesktop: boolean; open: boolean; setOpen: (v: boolean) => void } | null>(null)\n\nexport function useDrawerDialog() {\n  const ctx = useContext(DrawerDialogContext)\n  if (!ctx) throw new Error(\"useDrawerDialog must be used within <DrawerDialog>\")\n  return ctx\n}\n\n\nexport function DrawerDialog({ children }: { children: React.ReactNode }) {\n  const [open, setOpen] = useState(false)\n  const isDesktop = useMediaQuery(\"(min-width: 768px)\")\n\n  const Wrapper = isDesktop ? Dialog : Drawer\n\n  return (\n    <DrawerDialogContext.Provider value={{ isDesktop, open, setOpen }}>\n      <Wrapper open={open} onOpenChange={setOpen}>\n        {children}\n      </Wrapper>\n    </DrawerDialogContext.Provider>\n  )\n}\n\nexport function DrawerDialogTrigger({ children }: { children: React.ReactNode }) {\n  const { isDesktop } = useDrawerDialog()\n  const Trigger = isDesktop ? DialogTrigger : DrawerTrigger\n  return <Trigger asChild>{children}</Trigger>\n}\n\nexport function DrawerDialogContent({ children }: { children: React.ReactNode }) {\n  const { isDesktop } = useDrawerDialog()\n  const Content = isDesktop ? DialogContent : DrawerContent\n  return <Content>{children}</Content>\n}\n\nexport function DrawerDialogContentWrapper({ children }: { children: React.ReactNode }) {\n  const { isDesktop } = useDrawerDialog()\n  const className = isDesktop ? \"\" : \"px-4\"\n  return <div className={className}>{children}</div>\n}\n\nexport function DrawerDialogHeader({ children }: { children: React.ReactNode }) {\n  const { isDesktop } = useDrawerDialog()\n  const Header = isDesktop ? DialogHeader : DrawerHeader\n  return <Header>{children}</Header>\n}\n\nexport function DrawerDialogTitle({ children }: { children: React.ReactNode }) {\n  const { isDesktop } = useDrawerDialog()\n  const Title = isDesktop ? DialogTitle : DrawerTitle\n  return <Title>{children}</Title>\n}\n\nexport function DrawerDialogDescription({ children }: { children: React.ReactNode }) {\n  const { isDesktop } = useDrawerDialog()\n  const Desc = isDesktop ? DialogDescription : DrawerDescription\n  return <Desc>{children}</Desc>\n}\n\nexport function DrawerDialogFooter({ children }: { children: React.ReactNode }) {\n  const { isDesktop } = useDrawerDialog()\n  if (isDesktop) return children\n  const Footer = DrawerFooter\n  return (\n    <Footer>\n      {children}\n      <DrawerClose>\n        Cancel\n      </DrawerClose>\n    </Footer>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/drawer-dialog/hooks/use-media-query.ts",
      "content": "import * as React from \"react\"\n\nexport function useMediaQuery(query: string) {\n  const [value, setValue] = React.useState(false)\n\n  React.useEffect(() => {\n    function onChange(event: MediaQueryListEvent) {\n      setValue(event.matches)\n    }\n\n    const result = matchMedia(query)\n    result.addEventListener(\"change\", onChange)\n    setValue(result.matches)\n\n    return () => result.removeEventListener(\"change\", onChange)\n  }, [query])\n\n  return value\n}",
      "type": "registry:hook"
    }
  ]
}